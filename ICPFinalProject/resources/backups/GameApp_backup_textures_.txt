#include <GL/glew.h> // GLEW provides efficient run-time mechanisms for determining which OpenGL extensions are supported on the target platform.
#include <GLFW/glfw3.h> // library for app window creation
#include <glm/glm.hpp> // ibrary for math operations
#include <glm/ext.hpp>
#include <iostream>



#include "GameApp.h"
#include "ShaderProgram.h"
#include "Camera.h"




/*


	- The graphics pipeline takes as input a set of 3D coordinates and transforms these to colored 2D pixels on your screen.
	- The graphics pipeline can be divided into several steps where each step requires the output of the previous step as its input.
	SHADERS = The processing cores run small programs on the GPU for each step of the pipeline. These small programs are called shaders.
	- Shaders are written in the OpenGL Shading Language (GLSL)
	- Have to setup atleast vertex and fragment shaders !

	VERTEX SHADER = Process endpoints of polygons.
	FRAGMENT (PIXEL) SHADER = Process how pixels between verticies looks like

	- A fragment in OpenGL is all the data required for OpenGL to render a single pixel.

	modes: glBufferData()
	GL_STREAM_DRAW: the data is set only once and used by the GPU at most a few times.
	GL_STATIC_DRAW: the data is set only once and used many times.
	GL_DYNAMIC_DRAW: the data is changed a lot and used many times.



*/



//constructor
GameApp::GameApp() {

}

// init game window
// register window callbacks
// returns window object
GLFWwindow* GameApp::game_init_window() {

	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "ICPFinalGames", NULL, NULL);

	if (window == NULL)
	{
		std::cout << "Failed to create GLFW window" << std::endl;
		glfwTerminate();
		return NULL;
	}

	// make window current context
	glfwSetWindowUserPointer(window, this);
	glfwMakeContextCurrent(window);

	// some window setups
	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED); // hide cursor

	// init callbacks
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
	glfwSetCursorPosCallback(window, mouse_callback);
	glfwSetScrollCallback(window, scroll_callback);

	return window;

}


int GameApp::run_game() {

	GLFWwindow* window = game_init_window();

	if (window == NULL)
		return -1;

	// ini 
	GLenum err = glewInit();
	if (GLEW_OK != err)
	{
		/* Problem: glewInit failed, something is seriously wrong. */
		fprintf(stderr, "Error: %s\n", glewGetErrorString(err));
		return -1;
	}
	fprintf(stdout, "Status: Using GLEW %s\n", glewGetString(GLEW_VERSION));






	/* Shader definition */

	// build and compile our shader zprogram
	// ------------------------------------
	ShaderProgram ourShader("resources/shaders/vertex_shader.vert", "resources/shaders/fragment_shader.frag");

	// Just for info: Getm maximun num of vertex attributes supported by GPU
	int nrAttributes;
	glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &nrAttributes);
	std::cout << "Maximum nr of vertex attributes supported: " << nrAttributes << std::endl;


	float vertices[] = {
	-0.5f, -0.5f, -0.5f,  0.0f, 0.0f,
	 0.5f, -0.5f, -0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	-0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 0.0f,

	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 1.0f,
	-0.5f,  0.5f,  0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,

	-0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	-0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,

	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,  1.0f, 0.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,

	-0.5f,  0.5f, -0.5f,  0.0f, 1.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,  0.0f, 0.0f,
	-0.5f,  0.5f, -0.5f,  0.0f, 1.0f
	};

	glm::vec3 cubePositions[] = {
	glm::vec3(0.0f,  10.0f,  -3.0f),
	glm::vec3(2.0f,  50.0f, -1.0f),
	glm::vec3(-1.5f, 20.2f, -2.5f),
	glm::vec3(-3.8f, 20.0f, -1.3f),
	glm::vec3(2.4f, 30.4f, -3.5f),
	glm::vec3(-1.7f,  30.0f, -7.5f),
	glm::vec3(1.3f, 20.0f, -2.5f),
	glm::vec3(1.5f,  20.0f, -2.5f),
	glm::vec3(1.5f,  50.0f, -1.5f),
	glm::vec3(-1.3f,  10.0f, -1.5f)
	};

	// drawing X objects make some verticies duplicate, better to define unique verticies and specify order to draw them
	unsigned int indices[] = {
		0, 1, 3, // first triangle
		1, 2, 3  // second triangle
	};


	// VAO: Buffer to store makes different vertex data and makes switching between each configuration easy
	// EBO: Buffer to store indicies that OpenGL uses to decide what vertices to draw. You have to bind EBO after VAO;
	// 
	unsigned int VBO, VAO, EBO;
	glGenVertexArrays(1, &VAO);
	glGenBuffers(1, &VBO);
	//glGenBuffers(1, &EBO);

	// 1. bind Vertex Array Object
	// A vertex array object (also known as VAO) can be bound just like a vertex buffer object and any subsequent vertex attribute calls from that point on will be stored inside the VAO
	glBindVertexArray(VAO);

	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	//glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	//glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);



	// we have to manually specify what part of our input data goes to which vertex attribute in the vertex shader.
	// specify how OpenGL should interpret the vertex data before rendering.
	// position attribute
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);
	// color attribute
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);
	// texture coord attribute
	// glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	// glEnableVertexAttribArray(2);



	/* TEXTURES */
	unsigned int texture1, texture2;

	glGenTextures(1, &texture1);
	glBindTexture(GL_TEXTURE_2D, texture1);

	// set the texture wrapping/filtering options (on the currently bound texture object)
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);


	// load texture1 image
	int width, height, nrChannels;
	stbi_set_flip_vertically_on_load(true);
	unsigned char* data = stbi_load("resources/textures/container.jpg", &width, &height, &nrChannels, 0);

	if (data) {

		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);

	}
	else {
		std::cout << "Failed to load texture container" << std::endl;
	}

	stbi_image_free(data);

	// texture 2
	glGenTextures(1, &texture2);
	glBindTexture(GL_TEXTURE_2D, texture2);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);	// set texture wrapping to GL_REPEAT (default wrapping method)
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	data = stbi_load("resources/textures/awesomeface.png", &width, &height, &nrChannels, 0);
	if (data)
	{
		// note that the awesomeface.png has transparency and thus an alpha channel, so make sure to tell OpenGL the data type is of GL_RGBA
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data);

	// enable deoppth buffer
	glEnable(GL_DEPTH_TEST);

	ourShader.use(); // don't forget to activate the shader before setting uniforms!  
	ourShader.setInt("texture1", 0); // set it manually
	ourShader.setInt("texture2", 1); // or with shader class


	/* MAIN PROGRAM LOOP */
	double previousTime = glfwGetTime();
	int frameCount = 0;


	while (!glfwWindowShouldClose(window))
	{

		// Measure FPS speed
		float currentFrame = glfwGetTime();
		// count delta time
		deltaTime = currentFrame - lastFrame;
		lastFrame = currentFrame;
		frameCount++;
		// If a second has passed.
		if (currentFrame - previousTime >= 1.0)
		{
			// Display the frame count here any way you want.
			std::cout << "FPS: " << frameCount << std::endl;

			frameCount = 0;
			previousTime = currentFrame;
		}

		// check keyboard inputs
		processInput(window);

		/* rendering commands ... */

		// first clear the colorbuffer and depth buffer
		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		// bind textures on corresponding texture units
		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture1);
		glActiveTexture(GL_TEXTURE1);
		glBindTexture(GL_TEXTURE_2D, texture2);


		ourShader.use();


		/* Going 3D */

		// 2. View matrix
		glm::mat4 view;
		view = camera.GetViewMatrix();

		// 3. Projection matrix
		glm::mat4 projection = glm::mat4(1.0f);;
		projection = glm::perspective(glm::radians(camera.Zoom), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);


		/* TRANSOFRAMTION */

		ourShader.setMat4("view", view);
		ourShader.setMat4("projection", projection);



		glBindVertexArray(VAO);
		for (unsigned int i = 0; i < 10; i++)
		{
			glm::mat4 model = glm::mat4(1.0f);
			model = glm::translate(model, cubePositions[i]);
			float angle = 20.0f * i;
			model = glm::rotate(model, (float)glfwGetTime() * glm::radians(50.0f), glm::vec3(1.0f, 0.3f, 0.5f));
			ourShader.setMat4("model", model);

			glDrawArrays(GL_TRIANGLES, 0, 36);
		}

		// check and call events and swap the buffers
		glfwSwapBuffers(window);
		glfwPollEvents();
	}



	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);
	glDeleteBuffers(1, &EBO);

	return 0;


}


//destructor
GameApp::~GameApp() {


	glfwTerminate();
	std::cout << "Destructor was called." << std::endl;

}


/* Defined callbacks and key process inputs for game window */

// define key inputs
void GameApp::processInput(GLFWwindow* window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);

	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
		camera.ProcessKeyboard(FORWARD, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
		camera.ProcessKeyboard(BACKWARD, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
		camera.ProcessKeyboard(LEFT, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
		camera.ProcessKeyboard(RIGHT, deltaTime);
}

// callback on resize window
void GameApp::framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
	glViewport(0, 0, width, height);
}

// callback on mouse movement
void GameApp::mouse_callback(GLFWwindow* window, double xposIn, double yposIn) {

	// Retrieve the user pointer
	GameApp* gameApp = static_cast<GameApp*>(glfwGetWindowUserPointer(window));
	if (gameApp) {

		float xpos = static_cast<float>(xposIn);
		float ypos = static_cast<float>(yposIn);

		float xoffset = xpos - gameApp->lastX;
		float yoffset = gameApp->lastY - ypos; // reversed since y-coordinates go from bottom to top

		gameApp->lastX = xpos;
		gameApp->lastY = ypos;
		gameApp->camera.ProcessMouseMovement(xoffset, yoffset);

	}
}


// scroll callback
void GameApp::scroll_callback(GLFWwindow* window, double xoffset, double yoffset) {

	// Retrieve the user pointer
	GameApp* gameApp = static_cast<GameApp*>(glfwGetWindowUserPointer(window));

	// Call the class-specific function
	if (gameApp)
		gameApp->camera.ProcessMouseScroll(static_cast<float>(yoffset));

}
